---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Feature branch

on:
  push:
    branches:
      - '*'
      - '!master'

jobs:

  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.validate_new_version.outputs.planned_version }}
      version_file_exists: ${{ steps.validate_new_version.outputs.version_file_exists }}
      tag_hash: ${{ steps.validate_new_version.outputs.tag_hash }}
      can_create: ${{ steps.validate_new_version.outputs.can_create }}
      tag_exists: ${{ steps.validate_new_version.outputs.tag_exists }}
      branch_name: ${{ steps.validate_new_version.outputs.branch_name }}

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Use latest released action
        id: validate_new_version
        uses: reinvented-stuff/validate-version-action@master
        with:
          version_filename: ".version"
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          fail_on_error: false


  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      job_status: ${{ job.status }}
      artifact_name: ${{ steps.set_artifact_name.outputs.name }}

    needs:
      - validate_new_version

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "subscriber"
      TARGETOS: "linux"
      TARGETARCH: "amd64"

    if: >
      github.event_name == 'push'

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18


      - name: Define artifact name
        id: set_artifact_name
        run: |
          echo "::debug::Artifact name: ${{ env.APP_NAME }}-${{env.PLANNED_VERSION}}-${{ env.TARGETOS }}-${{ env.TARGETARCH }}"
          echo "::set-output name=name::${{ env.APP_NAME }}-${{env.PLANNED_VERSION}}-${{ env.TARGETOS }}-${{ env.TARGETARCH }}"


      - name: Build
        id: go_build
        run: >-
          go build
          -trimpath
          -gcflags="all=-N -l"
          -ldflags="-X 'main.BuildVersion=${{ env.PLANNED_VERSION }}'"
          -o "${{ steps.set_artifact_name.outputs.name }}"


      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: "${{ steps.set_artifact_name.outputs.name }}"
          path: "${{ steps.set_artifact_name.outputs.name }}"
          if-no-files-found: error
          retention-days: 90


      - name: Send out notification about build
        uses: rest-gateway/notification-action@master
        with:
          message: |
            Build: <b>${{env.APP_NAME}}</b> v${{env.PLANNED_VERSION}} (${{ env.BRANCH_NAME }})

            <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"

...
